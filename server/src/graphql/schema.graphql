type Book {
   id:ID!
   name: String
   genre: String
   authorid: Int
   author: [Author]
}

type Author {
   id:ID!
   name: String
   age: String
   books: [Book]
}

type User {
   id: ID!
   email: String
   password: String
   author: Author
   token: String
}

type Token{
   token: String!
   email: String!
   iat: String!
   exp: String!
}

type Count{
   data: Int
   qty: Int
}

type Query {
   books: [Book]
   countBookAuthor(data: Int!): [Count]
   book(id: Int, name: String, authorid: Int): [Book]
   authors: [Author]
   author(id:ID, name: String): [Author]
   users(limit: Int, offset : Int,excel: Boolean): [User]
   user(id: ID!): [User]
   logIn(email: String!, password: String!): [User]
}

type Mutation {
   addBook(name: String!, genre: String!, authorid: String!): [Book]
   deleteBook(id: Int, name: String): DeleteResponse
   logIn(email: String!, password: String!): Token
}

type DeleteResponse {
   success: Boolean!
   message: String
   books: [Book]
}